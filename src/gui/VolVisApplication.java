/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.BorderLayout;
import java.io.File;
import java.util.Hashtable;
import javax.media.opengl.awt.GLCanvas;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import volume.Volume;
import volvis.RaycastRenderer;
import volvis.Visualization;

/**
 *
 * @author michel
 */
public class VolVisApplication extends javax.swing.JFrame {

    Visualization visualization;
    Volume volume;
    RaycastRenderer raycastRenderer;
    
    /**
     * Creates new form VolVisApplication
     */
    public VolVisApplication() {
        initComponents();
        this.setTitle("Volume visualization");
        
        // Create a new visualization for the OpenGL panel
        GLCanvas glCanvas = new GLCanvas();
        renderPanel.setLayout(new BorderLayout());
        renderPanel.add(glCanvas, BorderLayout.CENTER);
        visualization = new Visualization(glCanvas);
        glCanvas.addGLEventListener(visualization);

        raycastRenderer = new RaycastRenderer();
        visualization.addRenderer(raycastRenderer);
        raycastRenderer.addTFChangeListener(visualization);
        tabbedPanel.addTab("Raycaster", raycastRenderer.getPanel());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        tabbedPanel = new javax.swing.JTabbedPane();
        loadVolume = new javax.swing.JPanel();
        loadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextPane = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        sliderViewVec = new javax.swing.JSlider();
        checkBoxTrilinearInterpolation = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        renderingMethodComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        resolutionScalingFactorSlider = new javax.swing.JSlider();
        numberOfThreadsSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        renderPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        splitPane.setDividerLocation(600);

        loadButton.setText("Load volume");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        infoTextPane.setEditable(false);
        jScrollPane1.setViewportView(infoTextPane);

        javax.swing.GroupLayout loadVolumeLayout = new javax.swing.GroupLayout(loadVolume);
        loadVolume.setLayout(loadVolumeLayout);
        loadVolumeLayout.setHorizontalGroup(
            loadVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadVolumeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loadVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        loadVolumeLayout.setVerticalGroup(
            loadVolumeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadVolumeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPanel.addTab("Load", loadVolume);

        sliderViewVec.setMajorTickSpacing(5);
        sliderViewVec.setPaintLabels(true);
        sliderViewVec.setPaintTicks(true);
        sliderViewVec.setValue(18);
        Hashtable labelTable1 = new Hashtable();
        labelTable1.put( new Integer( 0 ), new JLabel("0.1") );
        labelTable1.put( new Integer( 18 ), new JLabel("1") );
        labelTable1.put( new Integer( 38 ), new JLabel("2") );
        labelTable1.put( new Integer( 58 ), new JLabel("3") );
        labelTable1.put( new Integer( 78 ), new JLabel("4") );
        labelTable1.put( new Integer( 100 ), new JLabel("5.1") );
        sliderViewVec.setLabelTable( labelTable1 );
        sliderViewVec.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderViewVecStateChanged(evt);
            }
        });

        checkBoxTrilinearInterpolation.setSelected(true);
        checkBoxTrilinearInterpolation.setText("Trilinear Interpolation");
        checkBoxTrilinearInterpolation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxTrilinearInterpolationStateChanged(evt);
            }
        });

        jLabel1.setText("Sample distance");

        renderingMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Maximum Intensity Projection", "Compositing" }));
        renderingMethodComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                renderingMethodComboBoxItemStateChanged(evt);
            }
        });

        jLabel2.setText("Rendering method");

        jLabel3.setText("Resolution Scaling Factor");

        resolutionScalingFactorSlider.setMajorTickSpacing(1);
        resolutionScalingFactorSlider.setMaximum(8);
        resolutionScalingFactorSlider.setMinimum(1);
        resolutionScalingFactorSlider.setPaintLabels(true);
        resolutionScalingFactorSlider.setPaintTicks(true);
        resolutionScalingFactorSlider.setSnapToTicks(true);
        resolutionScalingFactorSlider.setValue(1);
        resolutionScalingFactorSlider.setInverted(true);
        Hashtable labelTable = new Hashtable();
        labelTable.put( new Integer( 1 ), new JLabel("1") );
        labelTable.put( new Integer( 2 ), new JLabel("1/4") );
        labelTable.put( new Integer( 4 ), new JLabel("1/8") );
        labelTable.put( new Integer( 8 ), new JLabel("1/64") );
        resolutionScalingFactorSlider.setLabelTable( labelTable );
        resolutionScalingFactorSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                resolutionScalingFactorSliderStateChanged(evt);
            }
        });

        numberOfThreadsSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(8), Integer.valueOf(1), null, Integer.valueOf(1)));
        numberOfThreadsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberOfThreadsSpinnerStateChanged(evt);
            }
        });

        jLabel4.setText("Divide rays over");

        jLabel5.setText("threads.");

        jCheckBox1.setText("Opacity Weighting");
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renderingMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sliderViewVec, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(resolutionScalingFactorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(checkBoxTrilinearInterpolation)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renderingMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sliderViewVec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resolutionScalingFactorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxTrilinearInterpolation)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numberOfThreadsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(251, Short.MAX_VALUE))
        );

        sliderViewVec.getAccessibleContext().setAccessibleName("SliderViewVec");

        tabbedPanel.addTab("Settings", jPanel1);

        splitPane.setBottomComponent(tabbedPanel);

        javax.swing.GroupLayout renderPanelLayout = new javax.swing.GroupLayout(renderPanel);
        renderPanel.setLayout(renderPanelLayout);
        renderPanelLayout.setHorizontalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );
        renderPanelLayout.setVerticalGroup(
            renderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );

        splitPane.setLeftComponent(renderPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(splitPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.isFile()) {
                    if (f.getName().toLowerCase().endsWith(".fld")) {
                        return true;
                    }
                }
                if (f.isDirectory()) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "AVS files";
            }
        });
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            volume = new Volume(file);

            String infoText = new String("Volume data info:\n");
            infoText = infoText.concat(file.getName() + "\n");
            infoText = infoText.concat("dimensions:\t\t" + volume.getDimX() + " x " + volume.getDimY() + " x " + volume.getDimZ() + "\n");
            infoText = infoText.concat("voxel value range:\t" + volume.getMinimum() + " - " + volume.getMaximum());
            infoTextPane.setText(infoText);
            raycastRenderer.setVolume(volume);
            visualization.update();

        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void sliderViewVecStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderViewVecStateChanged
        // [0.1, 5.1]
        raycastRenderer.setSampleDistance(0.1 + ((double) sliderViewVec.getValue()) / 20);
        visualization.update();
    }//GEN-LAST:event_sliderViewVecStateChanged

    private void checkBoxTrilinearInterpolationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxTrilinearInterpolationStateChanged
        raycastRenderer.setInterpolate(this.checkBoxTrilinearInterpolation.isSelected());
        visualization.update();
    }//GEN-LAST:event_checkBoxTrilinearInterpolationStateChanged

    private void renderingMethodComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_renderingMethodComboBoxItemStateChanged
        if ("Maximum Intensity Projection".equals((String)evt.getItem()))
            raycastRenderer.setMethod(RaycastRenderer.RENDERING_METHOD.MIP);
        else if ("Compositing".equals((String)evt.getItem()))
            raycastRenderer.setMethod(RaycastRenderer.RENDERING_METHOD.COM);
        
        visualization.update();
    }//GEN-LAST:event_renderingMethodComboBoxItemStateChanged

    private void resolutionScalingFactorSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resolutionScalingFactorSliderStateChanged
        raycastRenderer.setResolutionScalingFactor(this.resolutionScalingFactorSlider.getValue());
        visualization.update();
    }//GEN-LAST:event_resolutionScalingFactorSliderStateChanged

    private void numberOfThreadsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberOfThreadsSpinnerStateChanged
        raycastRenderer.setNumberOfThreads((Integer)this.numberOfThreadsSpinner.getValue());
        raycastRenderer.reconfigureThreadPool();
    }//GEN-LAST:event_numberOfThreadsSpinnerStateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
        raycastRenderer.setOpacityWeighting(this.jCheckBox1.isSelected());
        visualization.update();
    }//GEN-LAST:event_jCheckBox1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VolVisApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VolVisApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VolVisApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VolVisApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VolVisApplication().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxTrilinearInterpolation;
    private javax.swing.JTextPane infoTextPane;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel loadVolume;
    private javax.swing.JSpinner numberOfThreadsSpinner;
    private javax.swing.JPanel renderPanel;
    private javax.swing.JComboBox renderingMethodComboBox;
    private javax.swing.JSlider resolutionScalingFactorSlider;
    private javax.swing.JSlider sliderViewVec;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTabbedPane tabbedPanel;
    // End of variables declaration//GEN-END:variables
}
